/* tslint:disable */
/* eslint-disable */
/**
 * MsaasBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoginForm,
    LoginFormFromJSON,
    LoginFormToJSON,
    LoginResult,
    LoginResultFromJSON,
    LoginResultToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RegisterForm,
    RegisterFormFromJSON,
    RegisterFormToJSON,
    UpdateUserForm,
    UpdateUserFormFromJSON,
    UpdateUserFormToJSON,
    UpdateUserFormAdmin,
    UpdateUserFormAdminFromJSON,
    UpdateUserFormAdminToJSON,
    UserDto,
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models';

export interface UsersCurrentPutRequest {
    updateUserForm?: UpdateUserForm;
}

export interface UsersIdDeleteRequest {
    id: number;
}

export interface UsersIdGetRequest {
    id: number;
}

export interface UsersIdPutRequest {
    id: number;
    updateUserFormAdmin?: UpdateUserFormAdmin;
}

export interface UsersLoginPostRequest {
    loginForm?: LoginForm;
}

export interface UsersPostRequest {
    registerForm?: RegisterForm;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersCurrentGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/Current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersCurrentGet(): Promise<void> {
        await this.usersCurrentGetRaw();
    }

    /**
     */
    async usersCurrentPutRaw(requestParameters: UsersCurrentPutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users/Current`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserFormToJSON(requestParameters.updateUserForm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersCurrentPut(requestParameters: UsersCurrentPutRequest): Promise<void> {
        await this.usersCurrentPutRaw(requestParameters);
    }

    /**
     */
    async usersGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersGet(): Promise<void> {
        await this.usersGetRaw();
    }

    /**
     */
    async usersIdDeleteRaw(requestParameters: UsersIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersIdDelete(requestParameters: UsersIdDeleteRequest): Promise<void> {
        await this.usersIdDeleteRaw(requestParameters);
    }

    /**
     */
    async usersIdGetRaw(requestParameters: UsersIdGetRequest): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersIdGet(requestParameters: UsersIdGetRequest): Promise<UserDto> {
        const response = await this.usersIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async usersIdPutRaw(requestParameters: UsersIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserFormAdminToJSON(requestParameters.updateUserFormAdmin),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersIdPut(requestParameters: UsersIdPutRequest): Promise<void> {
        await this.usersIdPutRaw(requestParameters);
    }

    /**
     */
    async usersLoginPostRaw(requestParameters: UsersLoginPostRequest): Promise<runtime.ApiResponse<LoginResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginFormToJSON(requestParameters.loginForm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResultFromJSON(jsonValue));
    }

    /**
     */
    async usersLoginPost(requestParameters: UsersLoginPostRequest): Promise<LoginResult> {
        const response = await this.usersLoginPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async usersPostRaw(requestParameters: UsersPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterFormToJSON(requestParameters.registerForm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersPost(requestParameters: UsersPostRequest): Promise<void> {
        await this.usersPostRaw(requestParameters);
    }

}
