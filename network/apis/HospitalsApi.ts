/* tslint:disable */
/* eslint-disable */
/**
 * MsaasBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HospitalCreationForm,
    HospitalCreationFormFromJSON,
    HospitalCreationFormToJSON,
    HospitalDto,
    HospitalDtoFromJSON,
    HospitalDtoToJSON,
} from '../models';

export interface CreateHospitalRequest {
    hospitalCreationForm?: HospitalCreationForm;
}

export interface DeleteHospitalRequest {
    id: number;
}

export interface GetHospitalRequest {
    id: number;
}

export interface UpdateHospitalRequest {
    id: number;
    hospitalCreationForm?: HospitalCreationForm;
}

/**
 * 
 */
export class HospitalsApi extends runtime.BaseAPI {

    /**
     */
    async createHospitalRaw(requestParameters: CreateHospitalRequest): Promise<runtime.ApiResponse<HospitalDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Hospitals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HospitalCreationFormToJSON(requestParameters.hospitalCreationForm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HospitalDtoFromJSON(jsonValue));
    }

    /**
     */
    async createHospital(requestParameters: CreateHospitalRequest): Promise<HospitalDto> {
        const response = await this.createHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteHospitalRaw(requestParameters: DeleteHospitalRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteHospital.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteHospital(requestParameters: DeleteHospitalRequest): Promise<void> {
        await this.deleteHospitalRaw(requestParameters);
    }

    /**
     */
    async getHospitalRaw(requestParameters: GetHospitalRequest): Promise<runtime.ApiResponse<HospitalDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHospital.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HospitalDtoFromJSON(jsonValue));
    }

    /**
     */
    async getHospital(requestParameters: GetHospitalRequest): Promise<HospitalDto> {
        const response = await this.getHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getHospitalsRaw(): Promise<runtime.ApiResponse<Array<HospitalDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Hospitals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HospitalDtoFromJSON));
    }

    /**
     */
    async getHospitals(): Promise<Array<HospitalDto>> {
        const response = await this.getHospitalsRaw();
        return await response.value();
    }

    /**
     */
    async updateHospitalRaw(requestParameters: UpdateHospitalRequest): Promise<runtime.ApiResponse<HospitalDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateHospital.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HospitalCreationFormToJSON(requestParameters.hospitalCreationForm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HospitalDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateHospital(requestParameters: UpdateHospitalRequest): Promise<HospitalDto> {
        const response = await this.updateHospitalRaw(requestParameters);
        return await response.value();
    }

}
