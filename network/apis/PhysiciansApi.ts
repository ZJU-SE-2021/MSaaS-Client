/* tslint:disable */
/* eslint-disable */
/**
 * MsaasBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PhysicianDto,
    PhysicianDtoFromJSON,
    PhysicianDtoToJSON,
    PhysicianRegisterForm,
    PhysicianRegisterFormFromJSON,
    PhysicianRegisterFormToJSON,
} from '../models';

export interface DeletePhysicianRequest {
    id: number;
}

export interface GetPhysicianByIdRequest {
    id: number;
}

export interface GetPhysiciansRequest {
    departmentId?: number;
}

export interface RegisterPhysicianRequest {
    physicianRegisterForm?: PhysicianRegisterForm;
}

/**
 * 
 */
export class PhysiciansApi extends runtime.BaseAPI {

    /**
     */
    async deletePhysicianRaw(requestParameters: DeletePhysicianRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePhysician.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePhysician(requestParameters: DeletePhysicianRequest): Promise<void> {
        await this.deletePhysicianRaw(requestParameters);
    }

    /**
     */
    async getPhysicianByIdRaw(requestParameters: GetPhysicianByIdRequest): Promise<runtime.ApiResponse<PhysicianDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPhysicianById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PhysicianDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPhysicianById(requestParameters: GetPhysicianByIdRequest): Promise<PhysicianDto> {
        const response = await this.getPhysicianByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPhysiciansRaw(requestParameters: GetPhysiciansRequest): Promise<runtime.ApiResponse<Array<PhysicianDto>>> {
        const queryParameters: any = {};

        if (requestParameters.departmentId !== undefined) {
            queryParameters['departmentId'] = requestParameters.departmentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Physicians`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhysicianDtoFromJSON));
    }

    /**
     */
    async getPhysicians(requestParameters: GetPhysiciansRequest): Promise<Array<PhysicianDto>> {
        const response = await this.getPhysiciansRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async registerPhysicianRaw(requestParameters: RegisterPhysicianRequest): Promise<runtime.ApiResponse<PhysicianDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Physicians`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhysicianRegisterFormToJSON(requestParameters.physicianRegisterForm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PhysicianDtoFromJSON(jsonValue));
    }

    /**
     */
    async registerPhysician(requestParameters: RegisterPhysicianRequest): Promise<PhysicianDto> {
        const response = await this.registerPhysicianRaw(requestParameters);
        return await response.value();
    }

}
