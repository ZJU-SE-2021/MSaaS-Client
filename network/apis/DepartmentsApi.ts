/* tslint:disable */
/* eslint-disable */
/**
 * MsaasBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DepartmentCreationForm,
    DepartmentCreationFormFromJSON,
    DepartmentCreationFormToJSON,
    PhysicianRegisterForm,
    PhysicianRegisterFormFromJSON,
    PhysicianRegisterFormToJSON,
} from '../models';

export interface DepartmentsIdDeleteRequest {
    id: number;
}

export interface DepartmentsIdGetRequest {
    id: number;
}

export interface DepartmentsIdPhysiciansPostRequest {
    id: number;
    physicianRegisterForm?: PhysicianRegisterForm;
}

export interface DepartmentsIdPutRequest {
    id: number;
    departmentCreationForm?: DepartmentCreationForm;
}

export interface DepartmentsPostRequest {
    departmentCreationForm?: DepartmentCreationForm;
}

/**
 * 
 */
export class DepartmentsApi extends runtime.BaseAPI {

    /**
     */
    async departmentsGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async departmentsGet(): Promise<void> {
        await this.departmentsGetRaw();
    }

    /**
     */
    async departmentsIdDeleteRaw(requestParameters: DepartmentsIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling departmentsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async departmentsIdDelete(requestParameters: DepartmentsIdDeleteRequest): Promise<void> {
        await this.departmentsIdDeleteRaw(requestParameters);
    }

    /**
     */
    async departmentsIdGetRaw(requestParameters: DepartmentsIdGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling departmentsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async departmentsIdGet(requestParameters: DepartmentsIdGetRequest): Promise<void> {
        await this.departmentsIdGetRaw(requestParameters);
    }

    /**
     */
    async departmentsIdPhysiciansPostRaw(requestParameters: DepartmentsIdPhysiciansPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling departmentsIdPhysiciansPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Departments/{id}/Physicians`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhysicianRegisterFormToJSON(requestParameters.physicianRegisterForm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async departmentsIdPhysiciansPost(requestParameters: DepartmentsIdPhysiciansPostRequest): Promise<void> {
        await this.departmentsIdPhysiciansPostRaw(requestParameters);
    }

    /**
     */
    async departmentsIdPutRaw(requestParameters: DepartmentsIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling departmentsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DepartmentCreationFormToJSON(requestParameters.departmentCreationForm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async departmentsIdPut(requestParameters: DepartmentsIdPutRequest): Promise<void> {
        await this.departmentsIdPutRaw(requestParameters);
    }

    /**
     */
    async departmentsPostRaw(requestParameters: DepartmentsPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepartmentCreationFormToJSON(requestParameters.departmentCreationForm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async departmentsPost(requestParameters: DepartmentsPostRequest): Promise<void> {
        await this.departmentsPostRaw(requestParameters);
    }

}
